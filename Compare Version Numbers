package String;

/*
 * 需求：
 * Compare two version numbers version1 and version2.
If version1 > version2 return 1, if version1 < version2 return -1, otherwise return 0.

You may assume that the version strings are 
non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.
Here is an example of version numbers ordering:
0.1 < 1.1 < 1.2 < 13.37
	1.0和1是一个版本，意味即使长度不一样，也要检查后面是否都是0
	1.15要大于1.5，因为前者是第15个子版本，而后者是第5个
 */

public class CompareVersionNumbers {
    public int compareVersion(String version1, String version2) {
        if(version1.isEmpty()||version2.isEmpty())//判断为空
        	return 0;
        char[] squence1=version1.toLowerCase().toCharArray();
        char[] squence2=version2.toLowerCase().toCharArray();
        //判断是否含字母
        if(containsAlphabt(squence1)||containsAlphabt(squence2))
        	return 0;
        //分成两部分
        String[] arr1=version1.split("\\.");
        String[] arr2=version2.split("\\.");
        
        //转成INT进行比较  
        //以'.'为分割，一段一段的比较
        int i=0;
        while(i<arr1.length || i<arr2.length){
            if(i<arr1.length && i<arr2.length){
                if(Integer.parseInt(arr1[i]) < Integer.parseInt(arr2[i])){
                    return -1;
                }else if(Integer.parseInt(arr1[i]) > Integer.parseInt(arr2[i])){
                    return 1;
                }
            } else if(i<arr1.length){
                if(Integer.parseInt(arr1[i]) != 0){
                    return 1;
                }
            } else if(i<arr2.length){
               if(Integer.parseInt(arr2[i]) != 0){
                    return -1;
                }
            }
     
            i++;
        }
     
        return 0;
        	
    }
    /*
     * 字符数组内若有字母，返回true，否则false
     */
    public boolean containsAlphabt(char[] test){
    	for(int i=0;i<test.length;i++){
    		if(test[i]>='a'&&test[i]<='z')
    			return true;
    	}
    	return false;
    }

}

class CompareTest{
    public static void main(String[] args){
    	CompareVersionNumbers ds=new CompareVersionNumbers();
    	String v1="1.2.2";
    	String v2="1";
    	if(ds.compareVersion(v1,v2)==1)
    		System.out.println("大于");	
    	else if(ds.compareVersion(v1, v2)==-1)
    		System.out.println("小于");
    	else 
    		System.out.println("等于");
    }
	
}
