/*
 * 需求：旋转数组
 * Rotate an array of n elements to the right by k steps.
 */

public class RotateArray {
	/*
	 * 时间复杂度和空间复杂度都是O(N)
	 * 开辟一个新数组区域
	 * 倒着找到要旋转的区域，输出，
	 * 在正着找到没有旋转的地方，输出
	 */
    public void rotate(int[] nums, int k) {
        int reallyrotate=k%(nums.length);//循环，实际只旋转k%len次数
        
        int start=nums.length-reallyrotate;
        int end=nums.length-1;//确定待变换区域
        
        if(start<=end){
        	int[] y=new int[nums.length];
            int y_cur = 0;
            //赋值旋转区域
            for(int i=start;i<=end;i++){
            	y[i-nums.length+reallyrotate]=nums[i];//y[0]=num[i]
            	y_cur=i-nums.length+reallyrotate;
            }
            System.out.println("y_cur="+y_cur);
            //赋值没有旋转区域
            for(int j=0;j<=nums.length-reallyrotate-1;j++)
            {
            	y[y_cur+1+j]=nums[j];
            }
            
            System.arraycopy( y, 0, nums, 0, nums.length );//拷贝数组
            
            System.out.println(Arrays.toString(nums));
        }
        
    }
    
    /*
     * 冒泡排序
     * 时间复杂度O(N*K)
     * 但是空间复杂度只有O（1）
     */
//    public static void rotate(int[] arr, int order) {
//    	if (arr == null || order < 0) {
//    	    throw new IllegalArgumentException("Illegal argument!");
//    	}
//     
//    	for (int i = 0; i < order; i++) {
//    		for (int j = arr.length - 1; j > 0; j--) {
//    			int temp = arr[j];
//    			arr[j] = arr[j - 1];
//    			arr[j - 1] = temp;
//    		}
//    	}
//    }
    
    
    
    /*
     * 时间复杂度和空间复杂度都是O(N)
     * 反转
     * Assuming we are given {1,2,3,4,5,6} and order 2. The basic idea is:
     * 1. Divide the array two parts: 1,2,3,4 and 5, 6
		2. Rotate first part: 4,3,2,1,5,6
		3. Rotate second part: 4,3,2,1,6,5
		4. Rotate the whole array: 5,6,1,2,3,4
     */
    
//    public static void rotate(int[] arr, int order) {
//    	order = order % arr.length;
//     
//    	if (arr == null || order < 0) {
//    		throw new IllegalArgumentException("Illegal argument!");
//    	}
//     
//    	//length of first part
//    	int a = arr.length - order; 
//     
//    	reverse(arr, 0, a-1);
//    	reverse(arr, a, arr.length-1);
//    	reverse(arr, 0, arr.length-1);
//     
//    }
//     
//    public static void reverse(int[] arr, int left, int right){
//    	if(arr == null || arr.length == 1) 
//    		return;
//     
//    	while(left < right){
//    		int temp = arr[left];
//    		arr[left] = arr[right];
//    		arr[right] = temp;
//    		left++;
//    		right--;
//    	}	
//    }
}
