package Array;

/*
 * 需求：
 *	从1到9这10个数字中，选取k个数字加起来和等于n。
 *找到所有的集合，并确保集合中的数是升序
 */
import java.util.*;
public class CombinationSumIII {
	/*
	 * 分析：还是递归思想
	 * 先找到所有能加起来等于target的集合，再根据k的限制，删除不是k个的集合
	 */
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> result=new ArrayList<List<Integer>>();
        List<List<Integer>> uniqueresult=new ArrayList<List<Integer>>();
        int [] candidates={1,2,3,4,5,6,7,8,9};
        
        List<Integer> current=new ArrayList<Integer>();
        Arrays.sort(candidates);
        
        combinationSum3(candidates,n,0,current,result);
        for(int i=0;i<result.size();i++){
        	//System.out.println(result.get(i).size());
        	if(result.get(i).size()==k)//这里尤其注意不能使用result.get(i).size()!=k来判断，因为List中的remove方法，会自动索引减一
        		uniqueresult.add(result.get(i));
        }
        return uniqueresult;
    }
    
    public void combinationSum3(int[] candidates,int target,int j,List<Integer> curr,List<List<Integer>> result){
    	if(target==0){
    		List<Integer> tmp=new ArrayList<Integer>(curr);
    		result.add(tmp);
    		return;
    	}
    	for(int i=j;j<candidates.length;i++){
    		if(target<candidates[i])
    			return ;
    		curr.add(candidates[i]);
    		combinationSum3(candidates,target-candidates[i],i+1,curr,result);
    		curr.remove(curr.size()-1);
    	}
    }
}
class CombinationSumIIITest{
	public static void main(String[] args){
		CombinationSumIII object=new CombinationSumIII();
		System.out.println(object.combinationSum3(3, 6));
	}
}
