//Longest Palindromic Substring 
#include<iostream>
using namespace std;


//中心扩展法
class Solution {
public:
	string expandAroundCenter(string s, int left, int right) {
		int n = s.size();
		while (left >= 0 && right <= n - 1 && s[left] == s[right]) {
			left--;
			right++;
		}
		return s.substr(left + 1, right - left - 1);
	}

	string longestPalindrome(string s) {
		int n = s.size();
		if (n == 0) return "";
		string longest = s.substr(0, 1);  // a single char itself is a palindrome  
		for (int i = 0; i < n - 1; i++) {
			string p1 = expandAroundCenter(s, i, i); //长度为奇数的候选回文字符串  
			if (p1.length() > longest.length())
				longest = p1;

			string p2 = expandAroundCenter(s, i, i + 1);//长度为偶数的候选回文字符串  
			if (p2.length() > longest.length())
				longest = p2;
		}
		return longest;
	}
};


int main(void){
	string words = "abbafgh";
	string res;
	Solution ac;
	res = ac.longestPalindrome(words);
	cout << res.size();
}
